runtime macros/matchit.vim

set nocompatible

syntax enable
filetype plugin on

set background=dark
colorscheme gruvbox

if &runtimepath =~ ('lightline.vim')
  let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ }
  set noshowmode
endif

set backspace=2
set encoding=utf-8
set nobackup
set noswapfile
set mouse=a
set nowrap
set autoread
set autowrite
set scrolloff=10
set sidescrolloff=15
set sidescroll=1
set showcmd

set ignorecase "Case insensitive pattern matching
set smartcase "Overrides ignorecase if pattern contains upcase
set incsearch "Highligh while searching
set hlsearch "Highlight all matchers after entering search pattern

set cursorline
set cursorcolumn

" enable list of completion
set wildmode=list:longest,list:full
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.cache

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" Make nerdtree look nice
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30
let NERDTreeQuitOnOpen=1

function! NERDTreeFindToggle()
  if g:NERDTree.IsOpen()
    NERDTreeFind
    q
  else
    NERDTreeFind
  endif
endfunction
" ==== NERD tree
" Open the project tree and expose current file in the nerdtree with Ctrl-\
command! LocalNERDTreeToggle call NERDTreeFindToggle()
nnoremap <silent> <C-\> :LocalNERDTreeToggle<cr>

" vim-jsx
" Allow JSX in normal JS files
let g:jsx_ext_required = 0

" Emmet
let g:user_emmet_settings = {
      \  'javascript.jsx' : {
      \      'extends' : 'jsx',
      \  },
      \}

nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s
nnoremap <silent> // :nohlsearch<CR>

" bind 0 (zero) to the first character
nnoremap 0 ^

" vim-rspec mappings
nnoremap <Leader>rs :call RunCurrentSpecFile()<CR>
nnoremap <Leader>rn :call RunNearestSpec()<CR>
nnoremap <Leader>rl :call RunLastSpec()<CR>
nnoremap <Leader>ra :call RunAllSpecs()<CR>
nnoremap <leader>c :VtrSendKeysRaw ^C<cr>

let is_tmux = $TMUX
if is_tmux != ""
  autocmd VimEnter * VtrAttachToPane
endif

" Only allow those keys from tmux_navigator
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>

let g:tmux_navigator_disable_when_zoomed = 1

if filereadable(expand("./bin/rspec"))
  let g:rspec_command = "VtrSendCommandToRunner! ./bin/rspec {spec}"
else
  let g:rspec_command = "VtrSendCommandToRunner! rspec {spec}"
endif

" create <%= foo %> erb tags using Ctrl-k in edit mode
inoremap <silent> <C-K> <%=  %><Esc>2hi

" create <%= foo %> erb tags using Ctrl-j in edit mode
inoremap <silent> <C-J> <%  %><Esc>2hi

nnoremap <Leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <Leader>= :wincmd =<cr>

if executable('rg')
  " https://elliotekj.com/2016/11/22/setup-ctrlp-to-use-ripgrep-in-vim/
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
endif
let g:ctrlp_regexp = 1
let g:ctrlp_match_current_file = 1

let g:ale_fixers = {
  \ 'javascript': ['eslint']
\ }
